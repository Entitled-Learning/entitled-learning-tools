@page "/"
@inherits BasePage

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<PageTitle>Entitled Learning | Enrollment Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="fixed w-full">
            <div class="mx-auto max-w-7xl w-full px-4 sm:px-6 lg:px-8">
                <div class="py-5 w-full">
                    <h1 class="text-base tracking-tighter mb-3 lg:text-3xl">@_currentUser.FirstName @_currentUser.LastName</h1>
                </div>
                <div class="w-full">
                    <RadzenTabs @bind-SelectedIndex=@_selectedIndex Change="@(args => Navigate(_tabs[args]))" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
                        <Tabs>
                            <RadzenTabsItem Text="Profile">
                                @*<Profile currentUser="_currentUser" />*@
                                <UserProfile/>
                            </RadzenTabsItem>
                            @*<RadzenTabsItem Text="Students">

                            </RadzenTabsItem>*@
                        </Tabs>
                    </RadzenTabs>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {
    private EntitledLearningUser _currentUser = new EntitledLearningUser();

    [Parameter]
    [SupplyParameterFromQuery(Name = "option")]
    public string _selectedOption { get; set; } = DataTypes.Profile.ToString();

    private int _selectedIndex = 0;

    private List<string> _tabs = new List<string>() {
            DataTypes.Profile.ToString()
        };

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authenticationState?.User != null)
        {
            _currentUser.SetClaims(authenticationState.User.Claims);
        }

        if (_selectedOption == null)
        {
            NavManager.NavigateTo("/?option=Profile");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (_selectedOption is not null)
        {
            _selectedIndex = _tabs.IndexOf(_selectedOption) == -1 ? 0 : _tabs.IndexOf(_selectedOption);
        }
    }

    private void Navigate(object e)
    {
        NavManager.NavigateTo($"/?option={e}");
    }

}