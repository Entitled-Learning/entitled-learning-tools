@using EntitledLearning.Tools.UI.Services
@inject IStudentDataService _studentDataService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject NavigationManager NavManager

@if(ShowButtons) {
    <div class="flex items-center mb-2">
        <a href="/add-data?option=Students" class="mr-2">
            <RadzenButton Text="Add New" Icon="add" ButtonStyle="ButtonStyle.Primary" />
        </a>
        <div class="mr-2">
        <RadzenButton Text="Download as Excel" Icon="file_download" ButtonStyle="ButtonStyle.Success" Click="DownloadAsExcel" />
        </div>
        <div>
        <RadzenButton Text="Upload CSV" Icon="file_upload" ButtonStyle="ButtonStyle.Info" Click="OpenCsvUploadDialog" />
        </div>
    </div>
}

<div class="flex my-4">
    <RadzenTextBox class="flex-1 py-3 border-none rounded-full bg-gray-200/30" @oninput="UpdateFilteredData" placeholder="Search..." aria-label="Default TextBox" />
</div>
 
<RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="_pageSize" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
              Data="@_filteredData" TItem="StudentStorageContractV1" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
              SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedStudents RowSelect="(row) => OpenDetails(row)">
    <Columns>
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="Id" Title="ID" Width="120px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Title="Name" Width="200px">
            <Template>
                @context.Prefix @context.FirstName @context.MiddleName @context.LastName @context.Suffix
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="EmailAddress" Title="Email" Width="200px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="Race" Title="Race" Width="120px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Title="Age" Width="80px">
            <Template>
                @(context.Age)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="Gender" Title="Gender" Width="120px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="GradeLevel" Title="Grade Level" Width="120px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="School" Title="School" Width="200px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="HouseholdIncomeRange" Title="Household Income Range" Width="180px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="IsScholar" Title="Scholar" Width="100px">
            <Template>
                @(context.IsScholar ? "✅" : "❌")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="ShirtSize" Title="Shirt Size" Width="120px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="SummerElective" Title="Summer Elective" Width="150px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="CareerInterests" Title="Career Interests" Width="150px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="Allergies" Title="Allergies" Width="150px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="MedicationInstructions" Title="Medication Instructions" Width="180px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="LearningAccommodations" Title="Learning Accommodations" Width="180px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="AllowPhotoRelease" Title="Allow Photo Release" Width="150px">
            <Template>
                @(context.AllowPhotoRelease ? "✅" : "❌")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="Notes" Title="Notes" Width="200px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="AddressLine1" Title="Address Line 1" Width="180px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="AddressLine2" Title="Address Line 2" Width="180px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="City" Title="City" Width="120px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="State" Title="State" Width="100px" />
        <RadzenDataGridColumn TItem="StudentStorageContractV1" Property="ZipCode" Title="Zipcode" Width="100px" />
    </Columns>
</RadzenDataGrid>

@code {

    [Parameter] public bool ShowButtons { get; set; } = true;
    private IEnumerable<StudentStorageContractV1>? _students;
    private IList<StudentStorageContractV1>? _selectedStudents;
    private IList<StudentStorageContractV1>? _filteredData;
    private string _searchTerm = string.Empty;
    private int _pageSize = 20;
    private const int maxAllowedFileSize = 5 * 1024 * 1024; // 5MB
    private const int maxAllowedFiles = 1;
    private bool isUploading = false;
    private string uploadMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        _students = await _studentDataService.GetAllStudentsAsync();
        ResetFilteredData();
    }

    private void OpenDetails(StudentStorageContractV1 student)
    {
        NavManager.NavigateTo("/student/" + student.Id);
    }

    private async Task OpenCsvUploadDialog()
    {
        var result = DialogService.OpenAsync("Upload Student and Guardian CSV", ds =>
            @<RadzenStack Gap="1.5rem" Class="p-4">
                <p>Select a CSV file containing student and guardian data.</p>
                <p>CSV should have columns for student data (FirstName, LastName, Email, etc.) and guardian data (GuardianFirstName, GuardianLastName, GuardianEmail, etc.).</p>
                <RadzenButton Text="Download Sample CSV" Icon="file_download" ButtonStyle="ButtonStyle.Success" Click="DownloadSampleCsv" />
                <InputFile OnChange="OnInputFileChangeAsync" class="mt-2" id="fileInput" />
            </RadzenStack>
        );
    }

    private void UploadingProgressDialog()
    {
        DialogService.Open("Uploading...", ds =>
            @<RadzenStack Gap="1.5rem" Class="p-4">
                @if (isUploading)
                {
                    <RadzenStack Class="mt-4">
                        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 100%;" />
                        <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-mt-2 text-center">@uploadMessage</RadzenText>
                    </RadzenStack>
                }
            </RadzenStack>
        );
    }

    private async Task DownloadSampleCsv()
    {
        var sampleCsvContent = await _studentDataService.GetSampleCsvContentAsync();
        var base64 = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(sampleCsvContent));
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", new
        {
            content = base64,
            contentType = "text/csv",
            fileName = "SampleStudentGuardianUpload.csv"
        });
    }

    private void UpdateFilteredData(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }

    private async Task OnInputFileChangeAsync(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                isUploading = true;
                uploadMessage = $"Uploading {file.Name}... Processing data, please wait.";
                

                Console.WriteLine($"opening progress dialog");
                UploadingProgressDialog();
                
                bool success = await _studentDataService.ProcessCsvFileAsync(file);
                DialogService.Close();


                if (success)
                {
                    isUploading = false;
                    StateHasChanged();
                    DialogService.Close();
                    DialogService.Open("Success", ds => @<p>CSV file uploaded successfully.</p>);
                    
                    // Reload data after successful upload
                    await LoadDataAsync();
                }
                else 
                {
                    isUploading = false;
                    StateHasChanged();
                    DialogService.Close();
                    DialogService.Open("Error", ds => @<p>Error processing CSV file.</p>);
                }
            }
            catch (Exception ex)
            {
                isUploading = false;
                StateHasChanged();
                DialogService.Close();
                DialogService.Open("Error", ds => @<p>Error processing file: @ex.Message</p>);
            }
            finally
            {
                isUploading = false;
                StateHasChanged();
            }
        }
    }

    private void ResetFilteredData()
    {
        if (_students is null)
        {
            return;
        }

        _filteredData = new List<StudentStorageContractV1>();
        foreach (var student in _students)
        {
            if(_filteredData.Any(t => t.Id == student.Id))
            {
                continue;
            } else {
                _filteredData.Add(student);
            }
        }
    }

    private async void FilterData()
    {
        if (_students is null)
        {
            return;
        }

        _filteredData = (await _studentDataService.FilterStudentsAsync(_searchTerm, _students)).ToList();
    }

    private async Task DownloadAsExcel()
    {
        if (_students is null || !_students.Any())
            return;

        try
        {
            var memoryStream = await _studentDataService.GenerateExcelFileAsync(_students);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());

            // Invoke JavaScript to trigger the download
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", 
                new
                {
                    content = base64,
                    contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    fileName = "StudentDataWithGuardians.xlsx"
                });
        }
        catch (Exception ex)
        {
            DialogService.Open("Error", ds => @<p>Error generating Excel file: @ex.Message</p>);
        }
    }
}