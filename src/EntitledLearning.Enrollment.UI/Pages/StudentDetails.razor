@page "/student/{studentId}"
@inherits BasePage

@inject NavigationManager NavManager
@inject StudentRepository _studentDB
@inject GuardianRepository _guardianDB
@inject GuardianStudentRelationshipRepository _relationshipDB
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject PageNotificationService PageNotificationService
@inject ILogger<StudentIntakeBase> _logger

<PageTitle>Entitled Tooling | Student Details</PageTitle>

<AuthorizeView>
    <Authorized>
        <section class="flex flex-col p-4 w-full">
            <RadzenBreadCrumb class="mb-8">
                <RadzenBreadCrumbItem Path="/explore-data?option=Students" Text="Data Exploer" />
                <RadzenBreadCrumbItem Icon=""
                    Text="@($"{_student.Prefix} {_student.FirstName} {_student.MiddleName} {_student.LastName} {_student.Suffix}")" />
            </RadzenBreadCrumb>

            <div class="flex flex-col">
                <div class="flex flex-wrap items-start justify-between mb-8">
                    <div>
                        <h1 class="text-2xl font-bold leading-loose">@_student.Prefix @_student.FirstName
                            @_student.MiddleName @_student.LastName @_student.Suffix (@_student.Id)</h1>
                        <h2 class="leading-loose"> </h2>
                    </div>
                    <div class="action-buttons flex items-center justify-content-start mb-2">
                        <RadzenButton class="align-self-start" Text="Edit" Icon="edit" ButtonStyle="ButtonStyle.Primary"
                            Size="ButtonSize.Small" Click="@(() => studentnModalRef?.ShowModal())" />

                        <RadzenButton class="align-self-start" Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger"
                            Size="ButtonSize.Small" Click="@(() => confirmationModalRef?.ShowModal())" />
                    </div>
                </div>

                <h1 class="text-lg font-bold leading-loose mb-2">Personal Information</h1>
                <div class="personal-details bg-blue-50 p-4 mb-8 grid">
                    <div>
                        <h1 class="font-medium text-lg mt-6">Address</h1>
                        <p class="text-gray-600 text-sm">@_student.AddressLine1</p>
                        <p class="text-gray-600 text-sm">@_student.AddressLine2</p>
                        <p class="text-gray-600 text-sm">@_student.City, @_student.State @_student.ZipCode</p>
                    </div>
                    <div>
                        <h1 class="font-medium text-lg mt-6">Race</h1>
                        <p class="text-gray-600 text-sm">@_student.Race</p>
                    </div>
                    <div>
                        <h1 class="font-medium text-lg mt-6">Age</h1>
                        <p class="text-gray-600 text-sm">@_student.Age</p>
                    </div>
                    <div>
                        <h1 class="font-medium text-lg mt-6">House Hold Imcome Range</h1>
                        <p class="text-gray-600 text-sm">@_student.HouseholdIncomeRange</p>
                    </div>
                    <div>
                        <h1 class="font-medium text-lg mt-6">Shirt Size</h1>
                        <p class="text-gray-600 text-sm">@_student.ShirtSize</p>
                    </div>
                </div>


                <div class="flex items-center mb-2">
                    <h1 class="text-lg font-bold leading-loose mr-2">Parents/Guardians</h1>
                    <RadzenButton Text="Add guardian" Icon="add" ButtonStyle="ButtonStyle.Success"
                            Size="ButtonSize.Small" Click=@(() => OpenGuardianDetails()) />
                </div>
                    
                <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.SimpleWithMenu" AllowSorting="true" AllowPaging="false"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="false" Data="@_guardians"
                    TItem="StudentGuardian" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedGuardians RowSelect="(row) => OpenGuardianDetails(row)">
                    <Columns>
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="Id"
                            Title="Guardian Id" Width="200px" />
                        <RadzenDataGridColumn TItem="StudentGuardian" Title="Name" Width="200px">
                            <Template Context="guardian">
                                @guardian.Prefix @guardian.FirstName @guardian.MiddleName @guardian.LastName
                                @guardian.Suffix
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="Relationship" Title="Relationship"
                            Width="200px" />
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="IsEmergencyContact"
                            Title="Emergency Contact?" Width="200px">
                            <Template Context="guardian">
                                @(guardian.IsEmergencyContact ? "✅" : "❌")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="IsAuthorizedPickup"
                            Title="Authorized Pickup?" Width="200px">
                            <Template Context="guardian">
                                @(guardian.IsAuthorizedPickup ? "✅" : "❌")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="CellPhoneNumber"
                            Title="Cell Phone Number" Width="200px" />
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="EmailAddress" Title="Email"
                            Width="200px" />
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="AddressLine1" Title="Address Line 1"
                            Width="120px" />
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="AddressLine2" Title="Address Line 2"
                            Width="160px" />
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="City" Title="City" Width="160px" />
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="State" Title="State" Width="160px" />
                        <RadzenDataGridColumn TItem="StudentGuardian" Property="ZipCode" Title="Zipcode"
                            Width="160px" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        </section>

        <Modal @ref="studentnModalRef">
            <!-- Dynamic content for the modal body -->
            <StudentIntakeForm OnCompleteStudentFormForm="@SubmitStudentModalForm" OnCancel="@CancelStudentModalForm" EditStudent="@_studentToEdit" />
        </Modal>
        <Modal @ref="guardianModalRef">
            <!-- Dynamic content for the modal body -->
            <GuardianIntakeForm OnCompleteGuardianForm="@SubmitGuardianModalForm" OnCancel="@CancelGuardianModalForm" EditGuardian="@_guardianToEdit" />
        </Modal>
        <ConfirmationModal @ref="confirmationModalRef" OnConfirmation="HandleDeleteConfirmation" />
    </Authorized>
    <NotAuthorized>
        <h1 class="text-2xl leading-loose">Please Log in to access this page</h1>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter] public string? studentId { get; set; }
    private StudentStorageContractV1 _student = new StudentStorageContractV1();
    private IEnumerable<StudentGuardian> _guardians = new List<StudentGuardian>();
    private IList<StudentGuardian>? _selectedGuardians;
    private Modal? studentnModalRef;
    private Modal? guardianModalRef;
    private ConfirmationModal? confirmationModalRef;
    private Student? _studentToEdit = null;
    private Guardian? _guardianToEdit = null;
    private DataMapper _mapper = new DataMapper();
    private bool _addGuardian = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await FetchData();
    }

    private async Task FetchData()
    {
        if (studentId is not null)
        {
            _student = await _studentDB.GetByIdAsync(studentId);
            _guardians = await _relationshipDB.GetByStudentIdAsync(studentId);

            _studentToEdit = _mapper.ToStudent(_student);
        }
    }

    private void OpenGuardianDetails(StudentGuardian? guardian = null)
    {
        if (guardian is not null)
        {
            _guardianToEdit = _mapper.ToGuardian(guardian);
        }
        else
        {
            _addGuardian = true;
            _guardianToEdit = new Guardian();
        }

        guardianModalRef?.ShowModal();
    }

    private async Task SubmitStudentModalForm(Student editedModel)
    {
        // Update the student
        var storageContract = _mapper.ToStudentStorageContractV1(editedModel);
        await _studentDB.UpdateAsync(storageContract);

        await FetchData();

        // Close the modal 
        studentnModalRef?.CloseModal();
    }

    private async Task SubmitGuardianModalForm(Guardian editedModel)
    {
        try {
            _logger.LogInformation("SubmitGuardianModalForm");
            // Update the guardian
            var guardianStorageContract = _mapper.ToGuardianStorageContractV1(editedModel);
            GuardianStorageContractV1? result = null;

            if (_addGuardian)
            {
                _logger.LogInformation("Add Guardian");
                result = await _guardianDB.AddAsync(guardianStorageContract);
            }
            else{
                _logger.LogInformation("Update Guardian");
                await _guardianDB.UpdateAsync(guardianStorageContract);
            }

            // Update the relationship
            var relationship = new GuardianStudentRelationshipStorageContractV1
            {
                StudentId = _student.Id,
                GuardianId = result is not null ? result.Id : editedModel.Id,
                Relationship = editedModel.Relationship,
                IsEmergencyContact = editedModel.IsEmergencyContact,
                IsAuthorizedPickup = editedModel.IsAuthorizedPickup
            };

            if (_addGuardian)
            {
                _logger.LogInformation("Add Relationship");
                await _relationshipDB.AddAsync(relationship);
            }
            else {
                _logger.LogInformation("Update Relationship");
                await _relationshipDB.UpdateAsync(relationship);
            }
        }
        catch
        {
            _addGuardian = false;
            PageNotificationService.NotifyErrorOccured();
        }

        await FetchData();

        // Close the modal 
        guardianModalRef?.CloseModal();
    }

    private void CancelStudentModalForm()
    {
        _studentToEdit = null;
        studentnModalRef?.CloseModal();
    }

    private void CancelGuardianModalForm()
    {
        _guardianToEdit = null;
        guardianModalRef?.CloseModal();
    }

    private async Task HandleDeleteConfirmation(bool confirmed)
    {
        confirmationModalRef?.CloseModal();

        if (confirmed)
        {
            try
            {
                await _studentDB.DeleteAsync(_student.Id!);

                NavManager.NavigateTo("/explore-data?option=Students");
            }
            catch
            {
                PageNotificationService.NotifyErrorOccured();
            }
        }
    }

}