@page "/enroll"
@using System.Globalization
@using EntitledLearning.Enrollment.UI.Shared.Charts

@inherits BasePage
@inject NavigationManager NavManager
@inject StudentRepository _studentDB
@inject GuardianRepository _guardianDB
@inject GuardianStudentRelationshipRepository _relationshipDB
@inject PageNotificationService PageNotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject ILogger<Enroll> _logger

<PageTitle>Entitled Learning Enrollment | Enroll</PageTitle>

<AuthorizeView Context="authContext">
    <Authorized>
        <section class="flex flex-col p-4 w-full">
            <section class="header-section p-8">
                <h1 class="account-menu-title text-3xl tracking-tighter lg:text-4xl">
                    <strong class="">
                        Welcome to Entiled Learning Enrollment
                    </strong>
                </h1>

                @* Student Section *@
                <h1 class="text-2xl leading-loose mt-8">Student Information</h1>
                <p class="text-sm text-gray-600 mb-4">Please provide information for the students you would like to enroll.</p>
                <ListTable Data="@students.Select(x => x.ToDictionary())" OnItemClick="@HandleEditStudent" />

                <RadzenButton class="my-4" Text="Enroll a student" Icon="add" ButtonStyle="ButtonStyle.Success" Click="ShowStudentModalForm" />


                @* Parent/Guardian Section *@
                <h1 class="text-2xl leading-loose">Parent/Guardian Information</h1>
                <p class="text-sm text-gray-600 mb-4">
                    Please provide information for at least one parent/guardian.
                    If you are the guardian, please add your information.
                </p>
                <ListTable Data="@guardians.Select(x => x.ToDictionary())" OnItemClick="@HandleEditGuardian" />

                <RadzenButton class="my-4" Text="Add a guardian" Icon="add" ButtonStyle="ButtonStyle.Success" Click="ShowGuardianModalForm" />



                @*Dynamic modals*@
                <Modal @ref="guardianModalRef">
                    <!-- Dynamic content for the modal body -->
                    <GuardianIntakeForm OnCompleteGuardianForm="@SubmitGuardianModalForm" OnCancel="@CancelGuardianModalForm" EditGuardian="@guardianToEdit" />
                </Modal>


                <Modal @ref="studentnModalRef">
                    <!-- Dynamic content for the modal body -->
                    <StudentIntakeForm OnCompleteStudentFormForm="@SubmitStudentModalForm" OnCancel="@CancelStudentModalForm" EditStudent="@studentToEdit" />
                </Modal>

                <ConfirmationModal @ref="confirmationModalRef" ConfirmationText="Enroll student?" SubmitText="Enroll" OnConfirmation="HandleConfirmation" />

                @foreach (var errorMessage in submitErrorMessages)
                {
                    <div class="flex items-center alert alert-danger my-8 max-w-max" role="alert">
                        <span class="oi oi-circle-x mr-4 text-red-600" aria-hidden="true"></span>
                        @errorMessage
                    </div>
                }

                <div class="mt-4">
                    <RadzenButton type="submit" Text="Enroll" Icon="" ButtonStyle="ButtonStyle.Primary" Click="HandleValidSubmit" />
                </div>
            </section>
        </section>
    </Authorized>
    <NotAuthorized>
        <h1 class="text-2xl leading-loose">Please Log in to access this page</h1>
    </NotAuthorized>
</AuthorizeView>


@code {
    private EntitledLearningUser _currentUser = new EntitledLearningUser();

    private List<Student> students = new List<Student>();
    private List<Guardian> guardians = new List<Guardian>();
    private DataMapper mapper = new DataMapper();
    private Modal? studentnModalRef;
    private Modal? guardianModalRef;
    private Guardian? guardianToEdit = null;
    private Student? studentToEdit = null;
    private int? guardianToEditIndex = null;
    private int? studentToEditIndex = null;
    private ConfirmationModal? confirmationModalRef;
    private List<string> submitErrorMessages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authenticationState?.User != null)
        {
            _currentUser.SetClaims(authenticationState.User.Claims);

            var defaultGuardian = new Guardian();

            defaultGuardian.FirstName = _currentUser.FirstName;
            defaultGuardian.LastName = _currentUser.LastName;
            defaultGuardian.EmailAddress = _currentUser.Email;

            guardians.Add(defaultGuardian);
        }

        var student = new Student();
        student.initWithTestData();
        students.Add(student);


    }

    private void ShowGuardianModalForm()
    {
        guardianModalRef?.ShowModal();
    }

    private void ShowStudentModalForm()
    {
        studentnModalRef?.ShowModal();
    }

    private void SubmitGuardianModalForm(Guardian editedModel)
    {

        // Update the parent component's model with the edited data
        if (guardianToEditIndex is null)
        {
            guardians.Add(editedModel);
        }
        else
        {
            guardians[(int)guardianToEditIndex] = editedModel;
        }

        guardianToEdit = null;
        guardianToEditIndex = null;
        // Close the modal
        guardianModalRef?.CloseModal();
    }

    private void SubmitStudentModalForm(Student editedModel)
    {

        // Update the parent component's model with the edited data
        if (studentToEditIndex is null)
        {
            students.Add(editedModel);
        }
        else
        {
            students[(int)studentToEditIndex] = editedModel;
        }

        studentToEdit = null;
        studentToEditIndex = null;
        // Close the modal
        studentnModalRef?.CloseModal();
    }

    private void CancelGuardianModalForm()
    {
        guardianToEdit = null;
        guardianToEditIndex = null;
        guardianModalRef?.CloseModal();
    }

    private void CancelStudentModalForm()
    {
        studentToEdit = null;
        studentToEditIndex = null;
        studentnModalRef?.CloseModal();
    }

    private void HandleEditGuardian(int guardianIndex)
    {
        guardianToEdit = guardians[guardianIndex];
        guardianToEditIndex = guardianIndex;
        guardianModalRef?.ShowModal();
    }

    private void HandleEditStudent(int studentIndex)
    {
        studentToEdit = students[studentIndex];
        studentToEditIndex = studentIndex;
        studentnModalRef?.ShowModal();
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        confirmationModalRef?.CloseModal();

        if (confirmed)
        {
            try
            {

                var storedStudents = new List<StudentStorageContractV1>();
                var storedGuardians = new List<GuardianStorageContractV1>();

                // Save the students
                foreach (var student in students)
                {
                    var storageContract = mapper.ToStudentStorageContractV1(student);
                    var result = await _studentDB.AddAsync(storageContract);
                    storedStudents.Add(result);
                }

                // Save the guardians
                foreach (var guardian in guardians)
                {
                    var guardianStorageContract = mapper.ToGuardianStorageContractV1(guardian);
                    var result = await _guardianDB.AddAsync(guardianStorageContract);

                    // Save the relationship between the students and guardians
                    foreach (var student in storedStudents)
                    {
                        var relationship = new GuardianStudentRelationshipStorageContractV1();
                        relationship.StudentId = student.Id;
                        relationship.GuardianId = result.Id;
                        relationship.Relationship = guardian.Relationship;
                        relationship.IsAuthorizedPickup = guardian.IsAuthorizedPickup;
                        relationship.IsEmergencyContact = guardian.IsEmergencyContact;
                        await _relationshipDB.AddAsync(relationship);
                    }
                }

                NavManager.NavigateTo("/");
            }
            catch
            {
                PageNotificationService.NotifyErrorOccured();
            }
        }
    }

    private void HandleValidSubmit()
    {
        var valid = true;

        if (students.Count == 0)
        {
            submitErrorMessages.Add("Please provide information for at least one student.");
            valid = false;
        }

        if (guardians.Count == 0)
        {
            submitErrorMessages.Add("Please provide information for at least one parent/guardian.");
            valid = false;
        }

        if (valid)
        {
            confirmationModalRef?.ShowModal();
        }
    }
}
