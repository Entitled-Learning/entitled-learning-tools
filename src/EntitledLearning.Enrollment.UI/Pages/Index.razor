@page "/"
@inherits BasePage

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<PageTitle>Entitled Learning | Enrollment Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="flex flex-col w-full xl:w-2/3 border-x-1">
            <div class="py-5">
                <h1 class="text-base tracking-tighter mb-3 lg:text-3xl">Tope Daramola</h1>
            </div>
            <div class="w-full">
                <RadzenTabs @bind-SelectedIndex=@_selectedIndex Change="@(args => Navigate(_tabs[args]))" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="Profile">
                            <Profile/>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Students">

                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "option")]
    public string _selectedOption { get; set; } = DataTypes.Students.ToString();

    private int _selectedIndex = 0;

    private List<string> _tabs = new List<string>() {
            DataTypes.Students.ToString(),
            DataTypes.CommunityPartners.ToString(),
            DataTypes.Inventory.ToString()
        };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (_selectedOption == null)
        {
            NavManager.NavigateTo("/?option=Students");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (_selectedOption is not null)
        {
            _selectedIndex = _tabs.IndexOf(_selectedOption) == -1 ? 0 : _tabs.IndexOf(_selectedOption);
        }
    }

    private void Navigate(object e)
    {
        NavManager.NavigateTo($"/?option={e}");
    }

}