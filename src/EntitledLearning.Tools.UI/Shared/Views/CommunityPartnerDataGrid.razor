@inject CommunityPartnerRepository _db
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject NavigationManager NavManager

<div class="flex items-center mb-2">
    <a href="/add-data?option=CommunityPartners" class="mr-2">
        <RadzenButton Text="Add New" Icon="add" ButtonStyle="ButtonStyle.Primary" />
    </a>
    <div class="mr-2">
        <RadzenButton Text="Download as Excel" Icon="file_download" ButtonStyle="ButtonStyle.Success" Click="DownloadAsExcel" />
    </div>
    <div>
        <RadzenButton Text="Upload CSV" Icon="file_upload" ButtonStyle="ButtonStyle.Info" Click="OpenCsvUploadDialog" />
    </div>
</div>

<div class="flex my-4">
    <RadzenTextBox class="flex-1 py-3 border-none rounded-full bg-gray-200/30" @oninput="UpdateFilteredData" placeholder="Search..." aria-label="Default TextBox" />
</div>

<RadzenDataGrid  AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="_pageSize" AllowPaging="true"PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" 
    Data="@_filteredData" TItem="CommunityPartnerStorageContractV1" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedPartners RowSelect="(row) => OpenDetails(row)">
    <Columns>
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="Name" Filterable="false" Title="Partner Name" Frozen="true" Width="180px" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="PhoneNumber" Title="Phone Number" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="EmailAddress" Title="Email" Width="200px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="AddressLine1" Title="Address Line 1" Width="120px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="AddressLine2" Title="Address Line 2" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="City" Title="City" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="State" Title="State" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="ZipCode" Title="Zipcode" Width="160px" />
    </Columns>
</RadzenDataGrid>

@code {
    private IEnumerable<CommunityPartnerStorageContractV1>? _partners;
    private IList<CommunityPartnerStorageContractV1>? _selectedPartners;
    private IList<CommunityPartnerStorageContractV1>? _filteredData;
    private string _searchTerm = string.Empty;
    private DataMapper mapper = new DataMapper();
    private int _pageSize = 20;
    private const int maxAllowedFileSize = 5 * 1024 * 1024; // 5MB
    private bool isUploading = false;
    private string uploadMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _partners = await _db.GetAllAsync();
        ResetFilterdData();
    }

    private void OpenDetails(CommunityPartnerStorageContractV1 partner)
    {
        NavManager.NavigateTo("/community-partner/" + partner.Name);
    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
       var result = await DialogService.OpenAsync("Partner Details", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>@_selectedPartners?[0].Name</p>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>);
    }

    private async Task OpenCsvUploadDialog()
    {
        var result = await DialogService.OpenAsync("Upload Community Partner CSV", ds =>
            @<RadzenStack Gap="1.5rem" Class="p-4">
                <p>Select a CSV file containing community partner data.</p>
                <p>CSV should have columns for partner data (Name, PhoneNumber, EmailAddress, etc.).</p>
                
                <InputFile OnChange="OnInputFileChangeAsync" class="" id="fileInput" />
            </RadzenStack>
        );
    }

    private async Task OnInputFileChangeAsync(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(1))
        {
            if (!ValidateCsvFile(file))
            {
                return;
            }

            try
            {
                isUploading = true;
                uploadMessage = $"Uploading {file.Name}...";

                using var stream = file.OpenReadStream(maxAllowedFileSize);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                using var reader = new StreamReader(memoryStream);
                using var csv = new CsvHelper.CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture);
                
                csv.Context.RegisterClassMap<CsvCommunityPartnerRecordMap>();
                var csvRecords = csv.GetRecords<CsvCommunityPartnerRecord>().ToList();

                await ProcessCsvRecordsAsync(csvRecords);

                DialogService.Close();
                DialogService.Open("Success", ds => @<p>CSV file uploaded successfully.</p>);
            }
            catch (Exception ex)
            {
                DialogService.Close();
                DialogService.Open("Error", ds => @<p>Error processing file: @ex.Message</p>);
            }
            finally
            {
                isUploading = false;
            }
        }
    }

    private async Task ProcessCsvRecordsAsync(List<CsvCommunityPartnerRecord> records)
    {
        foreach (var record in records)
        {
            try
            {
                var partnerContract = mapper.ToCommunityPartnerStorageContractV1(record);
                await _db.AddAsync(partnerContract);
            }
            catch (Exception ex)
            {
                DialogService.Open("Error", ds => @<p>Error processing CSV records: @ex.Message</p>);
            }
        }

        _partners = await _db.GetAllAsync();
        ResetFilterdData();
    }

    private bool ValidateCsvFile(IBrowserFile file)
    {
        if (file.Size > maxAllowedFileSize)
        {
            DialogService.Close();
            DialogService.Open("Error", ds => @<p>File size exceeds the maximum limit of 5MB.</p>);
            return false;
        }

        if (!file.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
        {
            DialogService.Close();
            DialogService.Open("Error", ds => @<p>Invalid file type. Please upload a CSV file.</p>);
            return false;
        }

        if (file.Size == 0)
        {
            DialogService.Close();
            DialogService.Open("Error", ds => @<p>File is empty. Please upload a valid CSV file.</p>);
            return false;
        }

        return true;
    }

    private void UpdateFilteredData(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }

    private void ResetFilterdData()
    {
        if (_partners is null)
        {
            return;
        }

        _filteredData = new List<CommunityPartnerStorageContractV1>();
        foreach (var student in _partners)
        {
            if(_filteredData.Any(t => t.Name == student.Name))
            {
                continue;
            } else {
                _filteredData.Add(student);
            }
        }
    }

    private void FilterData()
    {
         if (_partners is null)
        {
            return;
        }

        _filteredData = _partners
        .Where(t =>
            (t.Name != null && t.Name.Contains(_searchTerm.Trim(), StringComparison.OrdinalIgnoreCase)) ||
            (t.EmailAddress != null && t.EmailAddress.Contains(_searchTerm.Trim(), StringComparison.OrdinalIgnoreCase)) ||
            (t.AddressLine1 != null && t.AddressLine1.Contains(_searchTerm.Trim(), StringComparison.OrdinalIgnoreCase)) ||
            (t.AddressLine2 != null && t.AddressLine2.Contains(_searchTerm.Trim(), StringComparison.OrdinalIgnoreCase)) ||
            (t.City != null && t.City.Contains(_searchTerm.Trim(), StringComparison.OrdinalIgnoreCase)) ||
            (t.State != null && t.State.Contains(_searchTerm.Trim(), StringComparison.OrdinalIgnoreCase)) ||
            (t.ZipCode != null && t.ZipCode.Contains(_searchTerm.Trim(), StringComparison.OrdinalIgnoreCase))).ToList();
    }

    private async Task DownloadAsExcel()
    {
        var filteredData = _partners?.Select(x => x.ToDictionary());

        if (filteredData is not null && filteredData.Any())
        {
            var package = new OfficeOpenXml.ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Sheet1");

            // Header
            var headerRow = 1;
            var columnIndex = 1;
            foreach (var header in filteredData.First().Keys)
            {
                worksheet.Cells[headerRow, columnIndex].Value = header;
                columnIndex++;
            }

            // Data
            var dataRow = 2;
            foreach (var row in filteredData)
            {
                columnIndex = 1;
                foreach (var value in row.Values)
                {
                    worksheet.Cells[dataRow, columnIndex].Value = value;
                    columnIndex++;
                }
                dataRow++;
            }

            // Save the Excel package to a stream
            using (var stream = new MemoryStream())
            {
                await package.SaveAsAsync(stream);

                // Convert the byte array to base64
                var base64 = Convert.ToBase64String(stream.ToArray());
                
                // Invoke JavaScript to trigger the download
                await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", 
                    new
                    {
                        content = base64,
                        contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        fileName = "CommunityPartners.xlsx"
                    });
            }
        }
    }
}