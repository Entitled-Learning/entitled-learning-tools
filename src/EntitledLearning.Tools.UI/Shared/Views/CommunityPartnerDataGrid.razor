@using EntitledLearning.Tools.UI.Services
@inject ICommunityPartnerDataService _partnerDataService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject NavigationManager NavManager
@inject ILogger<CommunityPartnerDataGrid> _logger

<div class="flex items-center mb-2">
    <a href="/add-data?option=CommunityPartners" class="mr-2">
        <RadzenButton Text="Add New" Icon="add" ButtonStyle="ButtonStyle.Primary" />
    </a>
    <div class="mr-2">
        <RadzenButton Text="Download as Excel" Icon="file_download" ButtonStyle="ButtonStyle.Success" Click="DownloadAsExcel" />
    </div>
    <div>
        <RadzenButton Text="Upload CSV" Icon="file_upload" ButtonStyle="ButtonStyle.Info" Click="OpenCsvUploadDialog" />
    </div>
</div>

<div class="flex my-4">
    <RadzenTextBox class="flex-1 py-3 border-none rounded-full bg-gray-200/30" @oninput="UpdateFilteredData" placeholder="Search..." aria-label="Default TextBox" />
</div>

<RadzenDataGrid  AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="_pageSize" AllowPaging="true"PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" 
    Data="@_filteredData" TItem="CommunityPartnerStorageContractV1" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedPartners RowSelect="(row) => OpenDetails(row)">
    <Columns>
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="Name" Filterable="false" Title="Partner Name" Frozen="true" Width="180px" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="PhoneNumber" Title="Phone Number" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="EmailAddress" Title="Email" Width="200px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="AddressLine1" Title="Address Line 1" Width="120px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="AddressLine2" Title="Address Line 2" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="City" Title="City" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="State" Title="State" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="ZipCode" Title="Zipcode" Width="160px" />
    </Columns>
</RadzenDataGrid>

@code {
    private IEnumerable<CommunityPartnerStorageContractV1>? _partners;
    private IList<CommunityPartnerStorageContractV1>? _selectedPartners;
    private IList<CommunityPartnerStorageContractV1>? _filteredData;
    private string _searchTerm = string.Empty;
    private int _pageSize = 20;
    private bool isUploading = false;
    private string uploadMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _partners = await _partnerDataService.GetAllPartnersAsync();
            ResetFilteredData();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to load community partner data");
            DialogService.Open("Error", ds => @<p>Error loading community partners: @ex.Message</p>);
        }
    }

    private void OpenDetails(CommunityPartnerStorageContractV1 partner)
    {
        NavManager.NavigateTo("/community-partner/" + partner.Name);
    }

    private async Task OpenCsvUploadDialog()
    {
        var result = await DialogService.OpenAsync("Upload Community Partner CSV", ds =>
            @<RadzenStack Gap="1.5rem" Class="p-4">
                <p>Select a CSV file containing community partner data.</p>
                <p>CSV should have columns for partner data (Name, PhoneNumber, EmailAddress, etc.).</p>
                <RadzenButton Text="Download Sample CSV" Icon="file_download" ButtonStyle="ButtonStyle.Success" Click="DownloadSampleCsv" />
                <InputFile OnChange="OnInputFileChangeAsync" class="" id="fileInput" />
            </RadzenStack>
        );
    }

    private async Task DownloadSampleCsv()
    {
        try
        {
            var sampleCsvContent = await _partnerDataService.GetSampleCsvContentAsync();
            var base64 = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(sampleCsvContent));
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", new
            {
                content = base64,
                contentType = "text/csv",
                fileName = "SampleCommunityPartnerUpload.csv"
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error downloading sample CSV");
            DialogService.Open("Error", ds => @<p>Error downloading sample CSV: @ex.Message</p>);
        }
    }

    private async Task OnInputFileChangeAsync(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                isUploading = true;
                uploadMessage = $"Uploading {file.Name}...";

                bool success = await _partnerDataService.ProcessCsvFileAsync(file);
                
                if (success)
                {
                    DialogService.Close();
                    DialogService.Open("Success", ds => @<p>CSV file uploaded successfully.</p>);
                    
                    // Reload the data
                    await LoadDataAsync();
                }
                else
                {
                    DialogService.Close();
                    DialogService.Open("Error", ds => @<p>Error processing CSV file.</p>);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing CSV file");
                DialogService.Close();
                DialogService.Open("Error", ds => @<p>Error processing file: @ex.Message</p>);
            }
            finally
            {
                isUploading = false;
            }
        }
    }

    private async void UpdateFilteredData(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        await FilterDataAsync();
    }

    private void ResetFilteredData()
    {
        if (_partners is null)
        {
            return;
        }

        _filteredData = new List<CommunityPartnerStorageContractV1>();
        foreach (var partner in _partners)
        {
            if(_filteredData.Any(t => t.Name == partner.Name))
            {
                continue;
            } else {
                _filteredData.Add(partner);
            }
        }
    }

    private async Task FilterDataAsync()
    {
        if (_partners is null)
        {
            return;
        }

        _filteredData = (await _partnerDataService.FilterPartnersAsync(_searchTerm, _partners)).ToList();
    }

    private async Task DownloadAsExcel()
    {
        if (_partners is null || !_partners.Any())
            return;

        try
        {
            var memoryStream = await _partnerDataService.GenerateExcelFileAsync(_partners);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            
            // Invoke JavaScript to trigger the download
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", 
                new
                {
                    content = base64,
                    contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    fileName = "CommunityPartners.xlsx"
                });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating Excel file");
            DialogService.Open("Error", ds => @<p>Error generating Excel file: @ex.Message</p>);
        }
    }
}