@inject NavigationManager NavManager
@inject StudentRepository _studentDB
@inject GuardianRepository _guardianDB
@inject GuardianStudentRelationshipRepository _relationshipDB

<h1 class="text-2xl leading-loose">Student Information</h1>
<ListTable Items="@students.Select(x => x.ToDictionary())" OnItemClick="@HandleEditStudent" />
<p @onclick="ShowStudentModalForm" class="btn btn-success my-4">Add a student</p>

<Modal @ref="studentnModalRef">
    <!-- Dynamic content for the modal body -->
    <StudentIntakeForm OnCompleteStudentFormForm="@SubmitStudentModalForm" OnCancel="@CancelStudentModalForm" EditStudent="@studentToEdit" />
</Modal>

<h1 class="text-2xl leading-loose">Parent/Guardian Information</h1>
<p class="text-sm text-gray-600 mb-4">Please provide information for at least one parent/guardian.</p>   
<ListTable Items="@guardians.Select(x => x.ToDictionary())" OnItemClick="@HandleEditGuardian" />
<p @onclick="ShowGuardianModalForm" class="btn btn-success my-4">Add a guardian</p>

<Modal @ref="guardianModalRef">
    <!-- Dynamic content for the modal body -->
    <GuardianIntakeForm OnCompleteGuardianForm="@SubmitGuardianModalForm" OnCancel="@CancelGuardianModalForm" EditGuardian="@guardianToEdit" />
</Modal>

<ConfirmationModal @ref="confirmationModalRef" OnConfirmation="HandleConfirmation" />

@foreach(var errorMessage in submitErrorMessages)
{
    <div class="flex items-center alert alert-danger my-8 max-w-max" role="alert">
        <span class="oi oi-circle-x mr-4 text-red-600" aria-hidden="true"></span>
        @errorMessage
    </div>
}

<div>
    <button @onclick="HandleValidSubmit" class="btn btn-primary my-4"> Submit </button>
</div>

@code {
    private List<Student> students = new List<Student>();
    private List<Guardian> guardians = new List<Guardian>();
    private DataMapper mapper = new DataMapper();
    private Modal? studentnModalRef; 
    private Modal? guardianModalRef; 
    private Guardian? guardianToEdit = null;
    private Student? studentToEdit = null;
    private int? guardianToEditIndex = null;
    private int? studentToEditIndex = null;
    private ConfirmationModal? confirmationModalRef; 
    private List<string> submitErrorMessages = new List<string>();

    protected override void OnInitialized()
    {
        @* var student = new Student();
        student.initWithTestData();
        students.Add(student);

        var testGuardian = new Guardian();
        testGuardian.initWithTestData();
        guardians.Add(testGuardian); *@
    }

    private void ShowGuardianModalForm()
    {
        guardianModalRef?.ShowModal();
    } 

    private void ShowStudentModalForm()
    {
        studentnModalRef?.ShowModal();
    } 

    private void SubmitGuardianModalForm(Guardian editedModel)
    {
        
        // Update the parent component's model with the edited data
        if (guardianToEditIndex is null){
            guardians.Add(editedModel);
        } else {
            guardians[(int)guardianToEditIndex] = editedModel;
        }

        guardianToEdit = null;
        guardianToEditIndex = null;
        // Close the modal 
        guardianModalRef?.CloseModal();
    } 

    private void SubmitStudentModalForm(Student editedModel)
    {
        
        // Update the parent component's model with the edited data
        if (studentToEditIndex is null){
            students.Add(editedModel);
        } else {
            students[(int)studentToEditIndex] = editedModel;
        }

        studentToEdit = null;
        studentToEditIndex = null;
        // Close the modal 
        studentnModalRef?.CloseModal();
    } 

    private void CancelGuardianModalForm()
    {
        guardianToEdit = null;
        guardianToEditIndex = null;
        guardianModalRef?.CloseModal();
    } 

    private void CancelStudentModalForm()
    {
        studentToEdit = null;
        studentToEditIndex = null;
        studentnModalRef?.CloseModal();
    }

    private void HandleEditGuardian(int guardianIndex)
    {
        guardianToEdit = guardians[guardianIndex];
        guardianToEditIndex = guardianIndex;
        guardianModalRef?.ShowModal();
    }

    private void HandleEditStudent(int studentIndex)
    {
        studentToEdit = students[studentIndex];
        studentToEditIndex = studentIndex;
        studentnModalRef?.ShowModal();
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        confirmationModalRef?.CloseModal();
        
        if (confirmed)
        {
            Console.WriteLine("Student form submitted");
            try
            {
                var storedStudents = new List<StudentStorageContractV1>();
                var storedGuardians = new List<GuardianStorageContractV1>();

                // Save the students
                foreach (var student in students)
                {
                    var storageContract = mapper.ToStudentStorageContractV1(student);
                    var result = await _studentDB.AddAsync(storageContract);
                    storedStudents.Add(result);
                }

                // Save the guardians
                foreach (var guardian in guardians)
                {
                    var guardianStorageContract = mapper.ToGuardianStorageContractV1(guardian);
                    var result = await _guardianDB.AddAsync(guardianStorageContract);

                    // Save the relationship between the students and guardians
                    foreach (var student in storedStudents)
                    {
                        var relationship = new GuardianStudentRelationshipStorageContractV1();
                        relationship.StudentId = student.Id;
                        relationship.GuardianId = result.Id;
                        relationship.Relationship = guardian.Relationship;
                        relationship.IsAuthorizedPickup = guardian.IsAuthorizedPickup;
                        relationship.IsEmergencyContact = guardian.IsEmergencyContact;
                        await _relationshipDB.AddAsync(relationship);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
    }

    private void HandleValidSubmit()
    {
        var valid = true;

        if (students.Count == 0)
        {
            submitErrorMessages.Add("Please provide information for at least one student.");
            valid = false;
        }

        if (guardians.Count == 0)
        {
            submitErrorMessages.Add("Please provide information for at least one parent/guardian.");
            valid = false;
        }
        
        if (valid)
        {
            confirmationModalRef?.ShowModal();
        }
    }
}
