@inject CommunityPartnerRepository _db
@inject IJSRuntime JSRuntime
@inject DialogService DialogService

<div class="flex items-center mb-2">
    <a href="/add-data" class="mr-2">
        <RadzenButton Text="Add New" Icon="add" ButtonStyle="ButtonStyle.Primary" />
    </a>
    <RadzenButton Text="Download as Excel" Icon="file_download" ButtonStyle="ButtonStyle.Success" Click="DownloadAsExcel" />
</div>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
    FilterMode="FilterMode.SimpleWithMenu" AllowSorting="true" PageSize="_pageSize" AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@_partners"
    TItem="CommunityPartnerStorageContractV1" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedPartners RowClick="OpenDetails">
    <Columns>
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="Name" Filterable="false" Title="Partner Name" Frozen="true" Width="180px" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="PhoneNumber" Title="Phone Number" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="EmailAddress" Title="Email" Width="200px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="AddressLine1" Title="Address Line 1" Width="120px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="AddressLine2" Title="Address Line 2" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="City" Title="City" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="State" Title="State" Width="160px" />
        <RadzenDataGridColumn TItem="CommunityPartnerStorageContractV1" Property="ZipCode" Title="Zipcode" Width="160px" />
    </Columns>
</RadzenDataGrid>

@code {
    private IEnumerable<CommunityPartnerStorageContractV1>? _partners;
    private IList<CommunityPartnerStorageContractV1>? _selectedPartners;

    private int _pageSize = 20;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _partners = await _db.GetAllAsync();
    }

    private void OpenDetails()
    {
        Console.WriteLine(_selectedPartners?[0].Name);
        InvokeAsync(async () => {
            await BusyDialog();
        });
    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
       var result = await DialogService.OpenAsync("Partner Details", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>@_selectedPartners?[0].Name</p>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                    @* <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" /> *@
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>);
    }

    private async Task DownloadAsExcel()
    {
        var filteredData = _partners?.Select(x => x.ToDictionary());

        if (filteredData is not null && filteredData.Any())
        {
            var package = new OfficeOpenXml.ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Sheet1");

            // Header
            var headerRow = 1;
            var columnIndex = 1;
            foreach (var header in filteredData.First().Keys)
            {
                worksheet.Cells[headerRow, columnIndex].Value = header;
                columnIndex++;
            }

            // Data
            var dataRow = 2;
            foreach (var row in filteredData)
            {
                columnIndex = 1;
                foreach (var value in row.Values)
                {
                    worksheet.Cells[dataRow, columnIndex].Value = value;
                    columnIndex++;
                }
                dataRow++;
            }

            // Save the Excel package to a stream
            using (var stream = new MemoryStream())
            {
                await package.SaveAsAsync(stream);

                // Convert the byte array to base64
                var base64 = Convert.ToBase64String(stream.ToArray());
                
                // Invoke JavaScript to trigger the download
                await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", 
                    new
                    {
                        content = base64,
                        contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        fileName = "TableData.xlsx"
                    });
            }
        }
    }
}