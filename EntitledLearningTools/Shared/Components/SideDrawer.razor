@inject IJSRuntime JSRuntime

<div class="drawer"
  style="@(IsOpen ? "transform: translateX(0); filter: drop-shadow(8px 8px 6px rgba(0, 0, 0, 0.25))" : "transform: translateX(-100%); filter: none")">
  <RadzenButton class="bg-transparent" Click="Dismiss" Icon="close" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large"/>
  <ul class="drawer-ul">
    <div class="drawer-section w-full flex-1">
      <li @onclick="Dismiss">
        <a href="/">
          <RadzenButton class="bg-transparent" Icon="home" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large"/>
          <p>Home</p>
        </a>
      </li>
      <div class="divider">
        <hr>
      </div>
    </div>
    <div class="drawer-section w-full">
      <li @onclick="Dismiss">
        <a href="/settings">
          <RadzenButton class="bg-transparent" Icon="settings" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large"/>
          <p>Settings</p>
        </a>
      </li>
      <li @onclick="Dismiss">
        <a href="/feedback">
          <RadzenButton class="bg-transparent" Icon="help_outline" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large"/>
          <p>Help & Feedback</p>
        </a>
      </li>
    </div>
  </ul>
</div>

@code {
  [Parameter] public bool IsOpen { get; set; } = false;
  [Parameter] public Action? ParentChangeHandler { get; set; }

  private void Dismiss()
  {
    IsOpen = false;
    if (ParentChangeHandler != null){
      ParentChangeHandler.Invoke();
    }
  }
}