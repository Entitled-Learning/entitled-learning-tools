@inject NavigationManager NavManager
@inject StudentRepository _studentDB
@inject GuardianRepository _guardianDB
@inject GuardianStudentRelationshipRepository _relationshipDB
@inject PageNotificationService PageNotificationService
@inject ILogger<StudentIntakeBase> _logger


@* Parent/Guardian Section *@
<h1 class="text-2xl leading-loose">Parent/Guardian Information</h1>
<p class="text-sm text-gray-600 mb-4">Please provide information for at least one parent/guardian.</p>   
<ListTable Data="@guardians.Select(x => x.ToDictionary())" OnItemClick="@((index) => HandleEdit(index, guardians, ref guardianToEdit, ref guardianToEditIndex, guardianModalRef))" />

<RadzenButton class="my-4" Text="Add a guardian" Icon="add" ButtonStyle="ButtonStyle.Success" Click="@(() => ShowModal(guardianModalRef))" />

<Modal @ref="guardianModalRef">
    <!-- Dynamic content for the modal body -->
    <GuardianIntakeForm OnCompleteGuardianForm="@((editedModel) => SubmitModalForm(editedModel, guardians, ref guardianToEdit, ref guardianToEditIndex, guardianModalRef))" OnCancel="@(() => CloseModal(guardianModalRef))" EditGuardian="@guardianToEdit" />
</Modal>

@* Student Section *@
<h1 class="text-2xl leading-loose mt-8">Student Information</h1>
<ListTable Data="@students.Select(x => x.ToDictionary())" OnItemClick="@((index) => HandleEdit(index, students, ref studentToEdit, ref studentToEditIndex, studentnModalRef))" />

<RadzenButton class="my-4" Text="Add a student" Icon="add" ButtonStyle="ButtonStyle.Success" Click="@(() => ShowModal(studentnModalRef))" />

<Modal @ref="studentnModalRef">
    <!-- Dynamic content for the modal body -->
    <StudentIntakeForm OnCompleteStudentFormForm="@((editedModel) => SubmitModalForm(editedModel, students, ref studentToEdit, ref studentToEditIndex, studentnModalRef))" OnCancel="@(() => CloseModal(studentnModalRef))" EditStudent="@studentToEdit" />
</Modal>

<ConfirmationModal @ref="confirmationModalRef" OnConfirmation="HandleConfirmation" />

@foreach(var errorMessage in submitErrorMessages)
{
    <div class="flex items-center alert alert-danger my-8 max-w-max" role="alert">
        <span class="oi oi-circle-x mr-4 text-red-600" aria-hidden="true"></span>
        @errorMessage
    </div>
}

<div class="mt-4">
    <RadzenButton type="submit" Text="Save" Icon="" ButtonStyle="ButtonStyle.Primary" Click="HandleValidSubmit" />
</div>

@code {
    private List<Student> students = new List<Student>();
    private List<Guardian> guardians = new List<Guardian>();
    private DataMapper mapper = new DataMapper();
    private Modal? studentnModalRef; 
    private Modal? guardianModalRef; 
    private Guardian? guardianToEdit = null;
    private Student? studentToEdit = null;
    private int? guardianToEditIndex = null;
    private int? studentToEditIndex = null;
    private ConfirmationModal? confirmationModalRef; 
    private List<string> submitErrorMessages = new List<string>();

    protected override void OnInitialized()
    {
        // Initialization logic can be added here if needed
    }

    private void ShowModal(Modal? modalRef)
    {
        modalRef?.ShowModal();
    }

    private void ShowModal(ConfirmationModal? modalRef)
    {
        modalRef?.ShowModal();
    }

    private void CloseModal(Modal? modalRef)
    {
        modalRef?.CloseModal();
    }

    private void CloseModal(ConfirmationModal? modalRef)
    {
        modalRef?.CloseModal();
    }

    private void SubmitModalForm<T>(T editedModel, List<T> collection, ref T? editTarget, ref int? editIndex, Modal? modalRef)
    {
        if (editIndex is null)
        {
            collection.Add(editedModel);
        }
        else
        {
            collection[(int)editIndex] = editedModel;
        }

        editTarget = default;
        editIndex = null;
        CloseModal(modalRef);
    }

    private void HandleEdit<T>(int index, List<T> collection, ref T? editTarget, ref int? editIndex, Modal? modalRef)
    {
        editTarget = collection[index];
        editIndex = index;
        ShowModal(modalRef);
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        CloseModal(confirmationModalRef);

        if (confirmed)
        {
            try
            {
                foreach (var guardian in guardians)
                {
                    var guardianStorageContract = mapper.ToGuardianStorageContractV1(guardian);
                    await _guardianDB.AddAsync(guardianStorageContract);

                    foreach (var student in students)
                    {
                        var storageContract = mapper.ToStudentStorageContractV1(student);
                        _studentDB.AddAsync(storageContract);

                        var relationship = new GuardianStudentRelationshipStorageContractV1
                        {
                            StudentId = student.Id,
                            GuardianId = guardian.Id,
                            Relationship = guardian.Relationship,
                            IsAuthorizedPickup = guardian.IsAuthorizedPickup,
                            IsEmergencyContact = guardian.IsEmergencyContact
                        };
                        await _relationshipDB.AddAsync(relationship);
                    }
                }

                NavManager.NavigateTo("/explore-data?option=Students");
            }
            catch
            {
                PageNotificationService.NotifyErrorOccured();
            }
        }
    }

    private void HandleValidSubmit()
    {
        submitErrorMessages.Clear();

        if (students.Count == 0)
        {
            submitErrorMessages.Add("Please provide information for at least one student.");
        }

        if (guardians.Count == 0)
        {
            submitErrorMessages.Add("Please provide information for at least one parent/guardian.");
        }

        if (submitErrorMessages.Count == 0)
        {
            ShowModal(confirmationModalRef);
        }
    }
}
