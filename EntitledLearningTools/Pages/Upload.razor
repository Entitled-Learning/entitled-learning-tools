@page "/upload"
@inject IJSRuntime JSRuntime
@inject IConfiguration Config
@inject BlobStoreAdapter BlobAdapter


<section class="mt-14">
    <h1 class="text-2xl leading-loose">Upload CSV to Entitled Learning's Cloud Storage</h1>

    <h5>Select the file type you want to upload, and then choose the file.</h5>

    <Dropdown Options="@segments" @bind-Value="selectedOption" />

    @*<p>Selected Option: @selectedOption</p>*@

    @*
        <SegmentedControl Segments="@segments" @bind-Value="selectedSegments" />

        <p>Selected Segment: @string.Join(", ", selectedSegments)</p>
    *@

    <InputFile OnChange="@UploadFile" />

    @if (isLoading)
    {
        <p>Uploading...</p>
    }

    @if (!string.IsNullOrEmpty(uploadResult))
    {
        <p>@uploadResult</p>
    }
</section>

@if (!string.IsNullOrEmpty(validationResult))
{
    <div class="flex items-center">
        <span class="oi oi-circle-x mr-4 text-red-600" aria-hidden="true"></span> <h2 class="text-2xl font-semibold py-8 leading-loose">@validationResult</h2>
    </div>
}

@if (invalidRow is not null)
{
    <div class="mx-auto">
        <div>
            <div class="-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto">
                <div class="inline-block min-w-full shadow-md rounded-lg overflow-hidden">
                    <table class="min-w-full leading-normal">
                        <thead>
                            <tr>
                                @foreach (var header in invalidRow.Keys)
                                {
                                    <th class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                                        @header
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @foreach (var header in invalidRow.Keys)
                                {
                                    <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                                        <p class="text-gray-900 whitespace-no-wrap">@invalidRow[header]</p>
                                    </td>
                                }

                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private List<IBrowserFile> loadedFiles = new();
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private string? uploadResult;
    private string? validationResult;
    private string connectionString = "";
    private string blobContainerName = "input";
    private string[] segments = new string[] { "Students", "Community Partners", "Community Partner Contacts" };
    private string selectedOption = "";
    private Dictionary<string, string> invalidRow = null;

    protected override void OnInitialized()
    {
        var blobContainerClient = BlobAdapter.GetBlobContainerClient();

        // Print out all the blob names
        foreach (BlobItem blob in blobContainerClient.GetBlobs())
        {
            Console.WriteLine(blob.Name);
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {

        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileValidationResult = await ValidateFile(file);
                if (!string.IsNullOrEmpty(fileValidationResult))
                {
                    validationResult = fileValidationResult;
                    isLoading = false;
                    return;
                }


                // Proceed with the file upload
                var blobContainerClient = BlobAdapter.GetBlobContainerClient();
                BlobClient blobClient = blobContainerClient.GetBlobClient(file.Name);
                var res = await blobClient.UploadAsync(file.OpenReadStream(), overwrite: true);

                uploadResult = "File uploaded successfully!";
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                uploadResult = ex.Message;
            }
        }

        isLoading = false;
    }

    private async Task<string> ValidateFile(IBrowserFile file)
    {
        // Validate file extension
        if (!file.ContentType.Equals("text/csv", StringComparison.OrdinalIgnoreCase))
        {
            return "Invalid file format. Please select a CSV file.";
        }

        // Validate file name
        var expectedFileName = selectedOption.ToLower().Replace(" ", "_") + ".csv";
        var actualFileName = file.Name.ToLower();

        if (!actualFileName.Equals(expectedFileName))
        {
            return $"Invalid file name. Please ensure the file name is '{expectedFileName}'.";
        }

        // Validate file content based on filename and column values
        var contentValidationResult = await ValidateFileContent(file);
        if (!string.IsNullOrEmpty(contentValidationResult))
        {
            return contentValidationResult;
        }

        return string.Empty;
    }

    private async Task<string> ValidateFileContent(IBrowserFile file)
    {
        var columnValidators = new Dictionary<string, Func<Dictionary<string, string>, string>>
{
            { "Students", Validator.ValidateStudentFile },
            { "Community Partners", Validator.ValidateCommunityPartnerFile },
        };

        try
        {
            using var streamReader = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await streamReader.CopyToAsync(ms);
            var csvLines = System.Text.Encoding.UTF8.GetString(ms.ToArray()).Split('\n');


            // Read CSV content into a List<string[]>
            var csvRecords = csvLines.Select(line => line.Split(',')).ToList();

            var headers = csvRecords[0];

            var rowDictionaries = new List<Dictionary<string, string>>();

            for (int i = 1; i < csvLines.Length - 1; i++)
            {
                var objResult = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length; j++)
                    objResult.Add(headers[j], csvRecords[i][j]);

                rowDictionaries.Add(objResult);
            }

            if (columnValidators.TryGetValue(selectedOption, out var validateMethod))
            {
                foreach (var row in rowDictionaries)
                {
                    var validationMessage = validateMethod(row);
                    if (!string.IsNullOrEmpty(validationMessage))
                    {
                        invalidRow = row;
                        foreach (var key in row.Keys)
                        {
                            Console.WriteLine(key);
                        }

                        // Return the first validation error found
                        return validationMessage;
                    }
                }
            }

            return string.Empty;
        }
        catch (JsonException ex)
        {
            Console.WriteLine(ex.Message);
            return "Error parsing CSV to JSON.";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return ex.Message;
        }
    }
}
