@using EntitledLearning.Tools.UI.Services
@inject IInventoryDataService _inventoryDataService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject NavigationManager NavManager
@inject PageNotificationService PageNotificationService
@inject ILogger<InventoryDataGrid> _logger

<div class="flex items-center mb-2">
    <a href="/add-data?option=Inventory" class="mr-2">
        <RadzenButton Text="Add New" Icon="add" ButtonStyle="ButtonStyle.Primary" />
    </a>
    <RadzenButton Text="Download as Excel" Icon="file_download" ButtonStyle="ButtonStyle.Success" Click="DownloadAsExcel" />
</div>

<div class="flex my-4">
    <RadzenTextBox class="flex-1 py-3 border-none rounded-full bg-gray-200/30" @oninput="UpdateFilteredData" placeholder="Search..." aria-label="Default TextBox" />
</div>
 
<RadzenDataGrid  AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="_pageSize" AllowPaging="true"PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" 
Data="@_filteredData"TItem=" InventoryItemStorageContractV1" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedItems RowSelect="(row) => OpenDetails(row)">
    <Columns>
        <RadzenDataGridColumn TItem=" InventoryItemStorageContractV1" Property="Name" Title="Name" Width="200px"/>
        <RadzenDataGridColumn TItem=" InventoryItemStorageContractV1" Property="Description" Title="Description" Width="200px" />
        <RadzenDataGridColumn TItem=" InventoryItemStorageContractV1" Property="Quantity" Title="Quantity" Width="200px" />
        <RadzenDataGridColumn TItem=" InventoryItemStorageContractV1" Property="Description" Title="Description" Width="200px" />
        <RadzenDataGridColumn TItem=" InventoryItemStorageContractV1" Property="PhysicalLocation" Title="Physical Location" Width="200px" />
        <RadzenDataGridColumn TItem=" InventoryItemStorageContractV1" Title="Expiration Date" Width="200px" >
            <Template>
                @(context.ExpirationDate?.ToString("MM/dd/yyy"))
            </Template>
        </RadzenDataGridColumn>        
        <RadzenDataGridColumn TItem=" InventoryItemStorageContractV1" Property="Sku" Title="Sku" Width="200px" />
    </Columns>
</RadzenDataGrid>

<Modal @ref="_itemModalRef">
    <!-- Dynamic content for the modal body -->
    <InventoryIntakeForm OnCompleteForm="@SubmitItemModalForm" OnCancel="@CancelItemModalForm" OnDelete="@HandleDelete" ShowDelete="@(true)" EditItem="@_itemToEdit" />
</Modal>

<ConfirmationModal @ref="confirmationModalRef" OnConfirmation="HandleDeleteConfirmation" />

@code {
    private IEnumerable<InventoryItemStorageContractV1>? _inventory;
    private IList<InventoryItemStorageContractV1>? _selectedItems;
    private IList<InventoryItemStorageContractV1>? _filteredData;

    private ConfirmationModal? confirmationModalRef; 
    private string _searchTerm = string.Empty;
    private Modal? _itemModalRef; 
    private InventoryItem? _itemToEdit = null;
    private DataMapper _mapper = new DataMapper();

    private int _pageSize = 20;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try 
        {
            _inventory = await _inventoryDataService.GetAllItemsAsync();
            ResetFilteredData();
        }
        catch (Exception ex) 
        {
            _logger.LogError(ex, "Failed to load inventory data");
            PageNotificationService.NotifyErrorOccured();
        }
    }

    private void OpenDetails(InventoryItemStorageContractV1 item)
    {
        _itemToEdit = _mapper.ToInventoryItem(item);
        _itemModalRef?.ShowModal();
    }

    private async void UpdateFilteredData(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        await FilterDataAsync();
    }

    private void ResetFilteredData()
    {
        if (_inventory is null)
        {
            return;
        }

        _filteredData = new List<InventoryItemStorageContractV1>();
        foreach (var item in _inventory)
        {
            if (_filteredData.Any(t => t.Id == item.Id))
            {
                continue;
            } else {
                _filteredData.Add(item);
            }
        }
    }

    private async Task FilterDataAsync()
    {
        if (_inventory is null)
        {
            return;
        }

        _filteredData = (await _inventoryDataService.FilterItemsAsync(_searchTerm, _inventory)).ToList();
    }

    private async Task SubmitItemModalForm(InventoryItem editedModel)
    {
        try 
        {
            // Update the item
            bool success = await _inventoryDataService.UpdateItemAsync(editedModel);
            
            if (success)
            {
                await LoadDataAsync();
                // Close the modal
                _itemModalRef?.CloseModal();
            }
            else
            {
                PageNotificationService.NotifyErrorOccured();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to update inventory item");
            PageNotificationService.NotifyErrorOccured();
        }
    }

    private void CancelItemModalForm()
    {
        _itemModalRef?.CloseModal();
    }

    private async Task DownloadAsExcel()
    {
        if (_inventory is null || !_inventory.Any())
            return;

        try
        {
            var memoryStream = await _inventoryDataService.GenerateExcelFileAsync(_inventory);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            
            // Invoke JavaScript to trigger the download
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", 
                new
                {
                    content = base64,
                    contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    fileName = "InventoryData.xlsx"
                });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating Excel file");
            PageNotificationService.NotifyErrorOccured();
        }
    }

    private void HandleDelete()
    {
        // close item modal
        _itemModalRef?.CloseModal();

        // show confirmation modal
        confirmationModalRef?.ShowModal();
    }

    private async Task HandleDeleteConfirmation(bool confirmed)
    {
        confirmationModalRef?.CloseModal();
        
        if (confirmed && _itemToEdit?.Id != null)
        {
            try
            {
                bool success = await _inventoryDataService.DeleteItemAsync(_itemToEdit.Id);
                
                if (success)
                {
                    await LoadDataAsync();
                }
                else
                {
                    PageNotificationService.NotifyErrorOccured();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to delete inventory item");
                PageNotificationService.NotifyErrorOccured();
            }
        }
    }
}