@page "/explore-data"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inherits ComponentBase

<PageTitle>Entitled Tooling | Explore Data</PageTitle>

<AuthorizeView>
    <Authorized>
        <section class="flex flex-col p-4 w-full">
            <RadzenBreadCrumb class="mb-8">
                <RadzenBreadCrumbItem Path="/" Text="Home" />
                <RadzenBreadCrumbItem Icon="" Text="Data Explorer" />
            </RadzenBreadCrumb>

            <div class="flex flex-col">
                <h1 class="text-2xl font-bold leading-loose">Explore Data</h1>
                <h2 class="leading-loose"></h2>
            </div>
            
            <RadzenTabs @bind-SelectedIndex=@_selectedIndex Change="@(args => Navigate(_tabs[args]))" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client" >
                <Tabs>
                    <RadzenTabsItem Text="Students">
                        <StudentDataGrid />
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Community Partners">
                        <CommunityPartnerDataGrid />
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Inventory">
                        <InventoryDataGrid />
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </section>
    </Authorized>
    <NotAuthorized>
        <h1 class="text-2xl leading-loose">Please Log in to access this page</h1>
    </NotAuthorized>
</AuthorizeView>


    @code {
        [Parameter]
        [SupplyParameterFromQuery(Name = "option")]
        public string _selectedOption { get; set; } = DataTypes.Students.ToString();

        private int _selectedIndex = 0;

        private List<string> _tabs = new List<string>() {
            DataTypes.Students.ToString(),
            DataTypes.CommunityPartners.ToString(),
            DataTypes.Inventory.ToString()
        };

        protected override void OnInitialized()
        {
            base.OnInitialized();

            if (_selectedOption == null)
            {
                NavManager.NavigateTo("/explore-data?option=Students");
            }
        }

        protected override async Task OnParametersSetAsync()
        {
            await base.OnParametersSetAsync();

            if(_selectedOption is not null){
                _selectedIndex = _tabs.IndexOf(_selectedOption) == -1 ? 0 : _tabs.IndexOf(_selectedOption);
            }
        }
        
        private void Navigate(object e)
        {
            NavManager.NavigateTo($"/explore-data?option={e}");
        }
    }
