<div class="my-4">
    <EditForm Model="@guardian" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
            <div class="form-group p-4 mt-2">
                <div class="flex flex-wrap mb-6">
                    <div class="w-full md:w-1/12 pr-3 mb-6 md:mb-0">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2"
                            for="GuardianPrefix">Prefix</label>
                        <InputText id="GuardianPrefix" @bind-Value="guardian.Prefix" class="form-input" />
                        <ValidationMessage For="@(() => guardian.Prefix)" />
                    </div>

                    <div class="w-full md:w-4/12 pr-3 mb-6 md:mb-0">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2"
                            for="GuardianFirstName">FirstName</label>
                        <InputText id="GuardianFirstName" @bind-Value="guardian.FirstName" class="form-input" />
                        <ValidationMessage For="@(() => guardian.FirstName)" />
                    </div>

                    <div class="w-full md:w-2/12 pr-3 mb-6 md:mb-0">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2"
                            for="GuardianMiddleName">MiddleName</label>
                        <InputText id="GuardianMiddleName" @bind-Value="guardian.MiddleName" class="form-input" />
                        <ValidationMessage For="@(() => guardian.MiddleName)" />
                    </div>

                    <div class="w-full md:w-4/12 pr-3 mb-6 md:mb-0">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2"
                            for="GuardianLastName">LastName</label>
                        <InputText id="GuardianLastName" @bind-Value="guardian.LastName" class="form-input" />
                        <ValidationMessage For="@(() => guardian.LastName)" />
                    </div>

                    <div class="w-full md:w-1/12 mb-6 md:mb-0">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2"
                            for="GuardianSuffix">Suffix</label>
                        <InputText id="GuardianSuffix" @bind-Value="guardian.Suffix" class="form-input" />
                        <ValidationMessage For="@(() => guardian.Suffix)" />
                    </div>
                </div>

                <div class="flex flex-wrap mb-6">
                <div class="w-full md:w-1/3 pr-3 mb-6 md:mb-0">
                    <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="CellPhoneNumber">
                        Cell Phone Number
                    </label>
                    <InputText id="PhoneNumber" @bind-Value="guardian.CellPhoneNumber" class="form-input" />
                    <ValidationMessage For="@(() => guardian.CellPhoneNumber)" />
                </div>

                <div class="w-full md:w-1/3 pr-3 mb-6 md:mb-0">
                    <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="EmailAddress">
                        Email Address
                    </label>
                    <InputText id="EmailAddress" @bind-Value="guardian.EmailAddress" class="form-input" />
                    <ValidationMessage For="@(() => guardian.EmailAddress)" />
                </div>

                <div class="w-full md:w-1/3 mb-6 md:mb-0">
                    <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="Relationship">
                        Relationship
                    </label>
                    <InputText id="Relationship" @bind-Value="guardian.Relationship" class="form-input" />
                    <ValidationMessage For="@(() => guardian.Relationship)" />
                </div>
            </div>

                <div class="flex flex-wrap mb-6">
                    <div class="w-full">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2"
                            for="AddressLine1">
                            Address Line 1
                        </label>
                        <InputText id="AddressLine1" @bind-Value="guardian.AddressLine1"
                            class="form-input" />
                        <ValidationMessage For="@(() => guardian.AddressLine1)" />
                    </div>
                </div>

                <div class="flex flex-wrap mb-6">
                    <div class="w-full">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2"
                            for="AddressLine2">
                            Address Line 2
                        </label>
                        <InputText id="AddressLine2" @bind-Value="guardian.AddressLine2"
                            class="form-input" />
                        <ValidationMessage For="@(() => guardian.AddressLine2)" />
                    </div>
                </div>

                <div class="flex flex-wrap mb-6">
                    <div class="w-full md:w-1/3 mb-6 md:mb-0">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="City">
                            City
                        </label>
                        <InputText id="City" @bind-Value="guardian.City" class="form-input" />
                        <ValidationMessage For="@(() => guardian.City)" />
                    </div>

                    <div class="w-full md:w-1/3 px-3 mb-6 md:mb-0">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="State">
                            State
                        </label>
                        <InputSelect id="State" class="form-input" @bind-Value="guardian.State">
                            @foreach (var item in states)
                            {
                                <option value="@item" selected>@item</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => guardian.State)" />
                    </div>

                    <div class="w-full md:w-1/3 mb-6 md:mb-0">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="ZipCode">
                            ZipCode
                        </label>
                        <InputText id="ZipCode" @bind-Value="guardian.ZipCode" class="form-input" />
                        <ValidationMessage For="@(() => guardian.ZipCode)" />
                    </div>
                </div>

                <button type="button" @onclick="HandleCancel" class="btn bg-red-600 text-white my-4 mr-2">Cancel</button>
                <button type="submit" class="btn btn-primary my-4">Save</button>
            </div>
    </EditForm>
</div>
        

@code {   

    [Parameter]
    public EventCallback<Guardian> OnCompleGuardianForm { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }
        
    private Guardian guardian = new Guardian();

    private string[] states = new string[] { "Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming" };

    private void HandleValidSubmit()
    {
        Console.WriteLine("Gauardian Form Submitted");
        // Pass the edited data back to the parent component
        OnCompleGuardianForm.InvokeAsync(guardian);
    }

    private void HandleCancel()
    {
        OnCancel.InvokeAsync();
    }
}