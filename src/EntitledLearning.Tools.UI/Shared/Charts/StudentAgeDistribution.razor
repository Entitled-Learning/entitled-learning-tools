@using System.Globalization
@inject StudentRepository _studentDB

<RadzenCard>
    <RadzenChart>
        <RadzenBarSeries Data="@ageDistributionData" CategoryProperty="AgeGroup" ValueProperty="Count">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenBarSeries>
        <RadzenCategoryAxis>
            <RadzenGridLines Visible="true" />
        </RadzenCategoryAxis>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Students" />
        </RadzenValueAxis>
    </RadzenChart>
</RadzenCard>

@code {
    private List<AgeDistributionData> ageDistributionData = new List<AgeDistributionData>();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        var students = await _studentDB.GetAllAsync();
        var today = DateTimeOffset.Now;
        
        var ageGroups = students
            .Where(s => s.DateOfBirth.HasValue)
            .GroupBy(s => CalculateAgeGroup(CalculateAge(s.DateOfBirth.Value, today)))
            .OrderBy(g => g.Key)
            .Select(g => new AgeDistributionData { 
                AgeGroup = g.Key, 
                Count = g.Count() 
            })
            .ToList();
            
        ageDistributionData = ageGroups;
    }
    
    private int CalculateAge(DateTimeOffset birthDate, DateTimeOffset today)
    {
        int age = today.Year - birthDate.Year;
        if (birthDate.Date > today.Date.AddYears(-age)) age--;
        return age;
    }
    
    private string CalculateAgeGroup(int age)
    {
        if (age < 5) return "Under 5";
        if (age < 10) return "5-9";
        if (age < 15) return "10-14";
        if (age < 18) return "15-17";
        if (age < 21) return "18-20";
        return "21+";
    }
    
    public class AgeDistributionData
    {
        public string AgeGroup { get; set; } = "";
        public int Count { get; set; }
    }
}
