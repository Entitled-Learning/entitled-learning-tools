@using System.Globalization
@inject StudentRepository _studentDB

<RadzenCard>
    <RadzenChart>
        <RadzenBarSeries Data="@incomeDistributionData" CategoryProperty="IncomeRange" ValueProperty="Count">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenBarSeries>
        <RadzenCategoryAxis>
            <RadzenGridLines Visible="true" />
        </RadzenCategoryAxis>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Students" />
        </RadzenValueAxis>
    </RadzenChart>
</RadzenCard>

@code {
    private List<IncomeDistributionData> incomeDistributionData = new List<IncomeDistributionData>();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        var students = await _studentDB.GetAllAsync();
        
        var incomeGroups = students
            .GroupBy(s => !string.IsNullOrEmpty(s.HouseholdIncomeRange) ? s.HouseholdIncomeRange : "Unspecified")
            .Select(g => new IncomeDistributionData { 
                IncomeRange = g.Key ?? "Unspecified", 
                Count = g.Count() 
            })
            .ToList();
            
        // Sort the income ranges properly if they follow a pattern like "25000-50000"
        incomeDistributionData = incomeGroups.OrderBy(x => {
            if (x.IncomeRange == "Unspecified") return int.MaxValue;
            var parts = x.IncomeRange.Split('-');
            if (parts.Length > 0 && int.TryParse(parts[0].Replace("$", "").Replace(",", ""), out int value))
                return value;
            return int.MaxValue;
        }).ToList();
    }
    
    public class IncomeDistributionData
    {
        public string IncomeRange { get; set; } = "";
        public int Count { get; set; }
    }
}
