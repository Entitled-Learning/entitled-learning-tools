@using System.Linq.Dynamic.Core
@using System.Globalization

@if (Data is not null && Data.Any())
{
    <RadzenDataGrid @bind-Value=@selectedItems Data="@Data" TItem="IDictionary<string, object>" ColumnWidth="200px"
        AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterMode="FilterMode.Advanced"
        AllowPaging="false" AllowSorting="false" SelectionMode="DataGridSelectionMode.Single" RowSelect="(e) => HandleRowClick(e)">
        <Columns>
            @foreach (var column in columns)
            {
                <RadzenDataGridColumn TItem="IDictionary<string, object>" Title="@column.Key" Type="column.Value"  Property="@GetColumnPropertyExpression(column.Key, column.Value)">
                    <Template>
                        @((context[column.Key] is DateTime || context[column.Key] is DateTimeOffset)
                            ? ((DateTimeOffset)context[column.Key]).ToString("MM/dd/yyyy")
                            : context[column.Key])
                    </Template>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>
}

@code {

    [Parameter] public IEnumerable<IDictionary<string, object>>? Data { get; set; }
    [Parameter] public EventCallback<int> OnItemClick { get; set; }
    IList<IDictionary<string, object>>? selectedItems;
    public IDictionary<string, Type> columns { get; set; } = new Dictionary<string, Type>();

    private void HandleRowClick(IDictionary<string, object> item)
    {
        if (!OnItemClick.HasDelegate)
        {
            return;
        }

        var itemId = item["Id"];

        if (Data != null)
        {
            foreach (var (index, row) in Data.Select((item, index) => (index, item)))
            {
                if (row["Id"] == itemId)
                {
                    InvokeAsync(async () => {
                        await OnItemClick.InvokeAsync(index);
                    });
                    break;
                }
            }
        }
    }

    public string GetColumnPropertyExpression(string name, Type type)
    {
        var expression = $@"it[""{name}""].ToString()";

        if (type == typeof(int))
        {
            return $"int.Parse({expression})";
        }
        else if (type == typeof(DateTime) || type == typeof(DateTimeOffset))
        {
            var format = "MM/dd/yyyy";

            if (type == typeof(DateTimeOffset))
            {
                return $"((DateTimeOffset){expression}).ToString(\"{format}\")";
            }
            else
            {
                return $"((DateTime){expression}).ToString(\"{format}\")";
            }
        }

        return expression;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Data is not null && Data.Any()){
            foreach (var header in Data.First().Keys)
            {
                var type = Data.First()[header] is not null ? Data.First()[header].GetType() : typeof(string);

                if(!columns.ContainsKey(header) && header != "Id"){
                    columns.Add(header, type);
                }
            }
        }
    }
}